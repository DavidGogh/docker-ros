version: '3.3'

services:
        #  ros-master:
        #    image: yuxianggao/ros-master:${DOCKER_ROS_DISTRO}-${DOCKER_ARCH}
        #    build:
        #      context: dockers/ros-master
        #      args:
        #        ROS_DISTRO: "$DOCKER_ROS_DISTRO"
        #        # ARCH: "$DOCKER_ARCH"
        #    container_name: ros-master
        #    network_mode: "host"
        #    privileged: true
        #    # Map volumes to sync time with the host
        #    volumes:
        #      - /etc/timezone:/etc/timezone:ro
        #      - /etc/localtime:/etc/localtime:ro
        #    restart: always

  ros-realsense:
    image: yuxianggao/ros-realsense:${DOCKER_ROS_DISTRO}-${DOCKER_ARCH}
    build:
      context: dockers/ros-realsense
      args:
        ROS_DISTRO: "$DOCKER_ROS_DISTRO"
        # ARCH: "$DOCKER_ARCH"
    container_name: ros-realsense
    privileged: true
    volume:
        - /dev
    #   depends_on:
    #  - ros-master
    network_mode: "host"
    environment:
        - ROS_MASTER_URI
        - ROS_IP
    command: /bin/bash -c "roslaunch --wait realsense2_camera rs_rgbd.launch initial_reset:=true"
    restart: unless-stopped

    #  ros-gui:
    #    image: yuxianggao/ros-gui:${DOCKER_ROS_DISTRO}-${DOCKER_ARCH}
    #    build:
    #      context: dockers/ros-gui
    #      args:
    #        ROS_DISTRO: "$DOCKER_ROS_DISTRO"
    #        # ARCH: "$DOCKER_ARCH"
    #    container_name: ros-gui
    #    network_mode: "host"
    #    privileged: true
    #    depends_on:
    #      - ros-realsense
    #    command: /bin/bash -c "rviz"
    #    restart: unless-stopped

  ros-dnn:
    image: yuxianggao/ros-dnn:${DOCKER_ROS_DISTRO}-${DOCKER_ARCH}
    build:
      context: dockers/ros-dnn
      args:
        ROS_DISTRO: "$DOCKER_ROS_DISTRO"
        # ARCH: "$DOCKER_ARCH"
    container_name: ros-dnn
    network_mode: "host"
    privileged: true
    depends_on:
      - ros-realsense
    environment:
        - ROS_MASTER_URI
        - ROS_IP
    command: /bin/bash -c "roslaunch --wait dnn_detect dnn_detect.launch camera:=/camera/color image:=image_raw"
    restart: unless-stopped
